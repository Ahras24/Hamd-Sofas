<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Account Page</title>
    <link rel="icon" type="image/png" href="/public/images/favicon.jpg">
    <link rel="stylesheet" href="/public/user/css/user-account.css">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    
</head>
<body>

  <%- include("../../views/partials/user/navbar")%>

  <section class="user-account">
  <div class="container">
    <div class="profile-card">
      <div class="profile-header">
        <div class="profile-img">
          <img src="<%= user.profileImage || '/public/images/profile-img.png' %>" alt="Profile Image" class="profile-picture">
        </div>
        <div class="profile-info">
          <h2> <%= user.username.toUpperCase() %> </h2>
          <p> Email: <%= user.email %> </p>
          <p> Mobile: <%= user.phone%> </p>
        </div>
        <div class="profile-actions">
          <a href="/user/edit-profile" class="btn">Edit Profile</a>
          <a href="/user/change-password" class="btn">Change Password</a>
          <a href="/user/orders" class="btn">My Orders</a>
          <a href="/user/wallet" class="btn">My Wallet</a>
          <form action="/user/logout" method="post" class="logout-form" id="logoutForm">
            <button type="submit" onclick="confirmLogout(event)" class="btn logout-btn">Logout</button>
          </form>
        </div>
      </div>

      <hr />

      <div class="address-section">
        <h3>Your Addresses</h3>

        <div class="address-list">
          <% if(addresses.length > 0 ) { %>
            <% addresses.forEach((address,index) => { %>
          <div class="address-card" data-id="<%= address._id %>">
            <p><strong><%= address.fullName %> <% if(address.isDefault) { %><span class="default-badge">Default</span><% } %></strong></p>
             <p><%= address.street %>, <%= address.city %>, <%= address.state %></p>
            <p>PIN: <%= address.pincode %>, <%= address.country %></p>
            <p>Phone: <%= address.phone %></p>

            <div class="address-actions">
              <a href="#" onclick="openEditAddressModal('<%= address._id %>')">Edit</a> |
               <a href="#" onclick="confirmDeleteAddress('<%= index %>')">Delete</a> |
               <% if (!address.isDefault) { %>
               <a href="#" onclick="confirmSetDefault('<%= address._id %>')">Set as Default</a>
                <% } %>
            </div>
          </div>
          <% }) %>
           <% } else { %>
            <p>No addresses found.</p>
            <% } %>

          <button class="btn add-address" onclick="openAddressModal()">+ Add New Address</button>
        </div>
      </div>
    </div>
  </div>
</section>


<!-- Edit Address Modal -->
<div id="editAddressModal" class="address-modal">
  <div class="modal-content">
    <span class="close" onclick="closeEditAddressModal()">&times;</span>
    <h2>Edit Address</h2>
    <form id="editAddressForm" method="post" action="">
      <div class="form-group">
        <label for="editFullName">Full Name</label>
        <input type="text" id="editFullName" name="fullName" >
        <span class="error-message" id="editNameError"></span>
      </div>
      <div class="form-group">
        <label for="editPhone">Phone Number</label>
        <input type="tel" id="editPhone" name="phone" >
        <span class="error-message" id="editPhoneError"></span>
      </div>
      <div class="form-group">
        <label for="editStreet">Street</label>
        <input type="text" id="editStreet" name="street" >
        <span class="error-message" id="editStreetError"></span>
      </div>
      <div class="form-group">
        <label for="editCity">City</label>
        <input type="text" id="editCity" name="city" >
        <span class="error-message" id="editCityError"></span>
      </div>
      <div class="form-group">
        <label for="editState">State</label>
        <input type="text" id="editState" name="state" >
        <span class="error-message" id="editStateError"></span>
      </div>
      <div class="form-group">
        <label for="editPincode">Pincode</label>
        <input type="text" id="editPincode" name="pincode" >
        <span class="error-message" id="editPincodeError"></span>
      </div>
      <div class="form-group">
        <label for="editCountry">Country</label>
        <input type="text" id="editCountry" name="country" >
        <span class="error-message" id="editCountryError"></span>
      </div>

      <input type="hidden" id="editAddressId" name="addressId" value="<%= addresses._id %>">

      <button type="submit" class="submit-btn">Update Address</button>
    </form>
  </div>
</div>


<!--Add Address Modal -->
<div id="addressModal" class="address-modal">
  <div class="modal-content">
    <span class="close" onclick="closeAddressModal()">&times;</span>
    <h2>Add New Address</h2>
    <form id="addressForm" method="POST" action="/user/add-address">
      <div class="form-group">
        <label for="fullName">Full Name</label>
        <input type="text" name="fullName" id="fullName"  />
        <span class="error-message" id="nameError"></span>
      </div>

      <div class="form-group">
        <label for="phone">Phone</label>
        <input type="tel" name="phone" id="phone"  />
        <span class="error-message" id="phoneError"></span>
      </div>

      <div class="form-group">
        <label for="street">Street</label>
        <input type="text" name="street" id="street"  />
        <span class="error-message" id="streetError"></span>
      </div>

      <div class="form-group">
        <label for="city">City</label>
        <input type="text" name="city" id="city"  />
        <span class="error-message" id="cityError"></span>
      </div>

      <div class="form-group">
        <label for="state">State</label>
        <input type="text" name="state" id="state"  />
        <span class="error-message" id="stateError"></span>
      </div>

      <div class="form-group">
        <label for="pincode">Pincode</label>
        <input type="text" name="pincode" id="pincode"  />
        <span class="error-message" id="pincodeError"></span>
      </div>

      <div class="form-group">
        <label for="country">Country</label>
        <input type="text" name="country" id="country"  />
        <span class="error-message" id="countryError"></span>
      </div>

      <button type="submit" class="submit-btn">Save Address</button>
    </form>
  </div>
</div>


  <%- include("../../views/partials/user/footer")%>

  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>


<script>
    const addresses = <%- JSON.stringify(addresses || []) %>;
</script>

<% if (defaultSet) { %>
<script>
  Swal.fire({
    icon: 'success',
    title: 'Default address set!',
    showConfirmButton: false,
    timer: 1500
  });
</script>
<% } %>

   <% if (success && success.length > 0) { %>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      Swal.fire({
        icon: 'success',
        title: 'Success!',
        text: `<%= success[0] %>`,
        confirmButtonColor: '#3085d6',
        confirmButtonText: 'OK',
        timer: 3000,
        timerProgressBar: true
      });
    });
  </script>
<% } %>

<% if (error && error.length > 0) { %>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      Swal.fire({
        icon: 'error',
        title: 'Error',
        text: `<%= error[0] %>`,
        confirmButtonColor: '#d33',
        confirmButtonText: 'OK'
      });
    });
  </script>
<% } %>

<% if (typeof otpSuccess !== 'undefined' && otpSuccess && otpSuccess.length > 0) { %>
  <script>
    document.addEventListener('DOMContentLoaded', function() {
      Swal.fire({
        icon: 'success',
        title: 'Email Updated!',
        text: `<%= otpSuccess[0] %>`,
        confirmButtonColor: '#28a745',
        confirmButtonText: 'Great!',
        timer: 4000,
        timerProgressBar: true
      });
    });
  </script>
<% } %>

<script>


  function confirmLogout(event) {
    event.preventDefault();

    Swal.fire({
      title: 'Are you sure?',
      text: "You will be logged out from your account.",
      icon: 'warning',
      showCancelButton: true,
      confirmButtonColor: '#d33',
      cancelButtonColor: '#6c757d',
      confirmButtonText: 'Yes, Logout',
      cancelButtonText: 'Cancel'

    }).then((result) => {
      if (result.isConfirmed) {
        document.getElementById('logoutForm').submit();
      }
    });
  }

  function confirmSetDefault(addressId) {
  Swal.fire({
    title: 'Are you sure?',
    text: "Do you want to set this address as default?",
    icon: 'question',
    showCancelButton: true,
    confirmButtonColor: '#3085d6',
    cancelButtonColor: '#999',
    confirmButtonText: 'Yes, set it!'
  }).then((result) => {
    if (result.isConfirmed) {
      fetch(`/user/set-default-address/${addressId}`, {
        method: 'PATCH'
      })
        .then(res => res.json())
        .then(data => {
          if (data.success) {
            Swal.fire({
              icon: 'success',
              title: 'Default address updated!',
              showConfirmButton: false,
              timer: 1500
            });

            // âœ… Now update the DOM to reflect the new default
            updateDefaultBadge(addressId);
          } else {
            Swal.fire('Error', 'Could not update default address.', 'error');
          }
        })
        .catch(() => {
          Swal.fire('Error', 'Something went wrong.', 'error');
        });
    }
  });
}

function updateDefaultBadge(defaultId) {
  // Remove all default badges and "Set as Default" links
  document.querySelectorAll('.default-badge').forEach(badge => badge.remove());
  document.querySelectorAll('.address-actions').forEach(actions => {
    const links = actions.querySelectorAll('a');
    links.forEach(link => {
      if (link.textContent.includes('Set as Default')) {
        link.style.display = 'inline';
      }
    });
  });

  // Add badge to the new default and hide the link
  const allAddressCards = document.querySelectorAll('.address-card');
  allAddressCards.forEach(card => {
    if (card.innerHTML.includes(defaultId)) {
      const nameTag = card.querySelector('strong');
      const badge = document.createElement('span');
      badge.className = 'default-badge';
      badge.textContent = 'Default';
      nameTag.appendChild(badge);

      const actionLinks = card.querySelector('.address-actions');
      const links = actionLinks.querySelectorAll('a');
      links.forEach(link => {
        if (link.textContent.includes('Set as Default')) {
          link.style.display = 'none';
        }
      });
    }
  });
}

  function confirmDeleteAddress(index) {
  Swal.fire({
    title: 'Are you sure?',
    text: 'Do you really want to delete this address?',
    icon: 'warning',
    showCancelButton: true,
    confirmButtonColor: '#d33',
    cancelButtonColor: '#aaa',
    confirmButtonText: 'Yes, delete it!',
  }).then((result) => {
    if (result.isConfirmed) {
      window.location.href = `/user/delete-address/${index}`;
    }
  });
}


// Edit Address Modal j.s
  function openEditAddressModal(addressId) {
    const address = addresses.find(addr => addr._id === addressId);

  document.getElementById("editFullName").value = address.fullName || '';
  document.getElementById("editPhone").value = address.phone || '';
  document.getElementById("editStreet").value = address.street || '';
  document.getElementById("editCity").value = address.city || '';
  document.getElementById("editState").value = address.state || '';
  document.getElementById("editPincode").value = address.pincode || '';
  document.getElementById("editCountry").value = address.country || '';
  document.getElementById("editAddressId").value = addressId;

  document.getElementById("editAddressForm").action = `/user/edit-address/${addressId}`;
  // Show the modal
  document.getElementById("editAddressModal").style.display = "block";
}

function closeEditAddressModal() {
    document.getElementById('editAddressModal').style.display = 'none';
    document.getElementById('editAddressForm').reset();
    document.querySelectorAll('.error-message').forEach(el => el.textContent = '');
}
window.onclick = function(event) {
    const editModal = document.getElementById('editAddressModal');
    if (event.target == editModal) {
        closeEditAddressModal();
    }
}

document.addEventListener('DOMContentLoaded', function() {
  const form = document.getElementById('editAddressForm');
  if (form) {
    form.addEventListener('submit', function(e) {
      e.preventDefault(); 

  let isValid = true;

  // Clear previous error messages
  document.getElementById('editNameError').textContent = '';
  document.getElementById('editPhoneError').textContent = '';
  document.getElementById('editStreetError').textContent = '';
  document.getElementById('editCityError').textContent = '';
  document.getElementById('editStateError').textContent = '';
  document.getElementById('editPincodeError').textContent = '';
  document.getElementById('editCountryError').textContent = '';

  const fullName = document.getElementById('editFullName').value.trim();
  const phone = document.getElementById('editPhone').value.trim();
  const street = document.getElementById('editStreet').value.trim();
  const city = document.getElementById('editCity').value.trim();
  const state = document.getElementById('editState').value.trim();
  const pincode = document.getElementById('editPincode').value.trim();
  const country= document.getElementById('editCountry').value.trim();

  if (fullName.length < 3) {
    document.getElementById('editNameError').textContent = 'Enter full name';
    isValid = false;
  }
  if (!/^\d{10}$/.test(phone)) {
    document.getElementById('editPhoneError').textContent = 'Enter valid 10-digit phone';
    isValid = false;
  }
  if (street === '') {
    document.getElementById('editStreetError').textContent = 'Street is required';
    isValid = false;
  }
  if (city === '') {
    document.getElementById('editCityError').textContent = 'City is required';
    isValid = false;
  }
  if (state === '') {
    document.getElementById('editStateError').textContent = 'State is required';
    isValid = false;
  }
  if (!/^\d{6}$/.test(pincode)) {
    document.getElementById('editPincodeError').textContent = 'Enter 6-digit PIN code';
    isValid = false;
  }
    if (country === '') {
    document.getElementById('editCountryError').textContent = 'Country is required';
    isValid = false;
  } 
    
   if (!isValid) {
       return;
  }


  const formData = new URLSearchParams(new FormData(this));
  const addressId = document.getElementById('editAddressId').value;

  fetch(`/user/edit-address/${addressId}`, {
    method: 'POST',
    body: formData,
    headers: {
    'Content-Type': 'application/x-www-form-urlencoded'
  }
  })

 .then(response =>  response.json())
  .then(data => {
    if (data.success) {
      Swal.fire({
        icon: 'success',
        title: 'Success!',
        text: data.message,
        confirmButtonText: 'OK',
        confirmButtonColor: '#28a745'
      }).then(() => {
        window.location.href = '/user/user-account';
      });
  }
})
  .catch(error => {
    Swal.fire({
      icon: 'error',
      title: 'Error!',
      text: 'Failed to update address',
      confirmButtonText: 'Try Again',
      confirmButtonColor: '#dc3545'
    });
  });
});

}
})

        
  

// Add Address Modal
   function openAddressModal() {
    document.getElementById('addressModal').style.display = 'block';
  }

  function closeAddressModal() {
    document.getElementById('addressModal').style.display = 'none';
    document.getElementById('addressForm').reset();
    document.querySelectorAll('.error-message').forEach(el => el.textContent = '');
  }

  window.onclick = function(event) {
    const modal = document.getElementById('addressModal');
    if (event.target == modal) {
      closeAddressModal();
    }
  }

  document.getElementById('addressForm').addEventListener('submit', function (e) {
    e.preventDefault();

    let isValid = true;
    document.querySelectorAll('.error-message').forEach(el => el.textContent = '');

    const fullName = document.getElementById('fullName').value.trim();
    const phone = document.getElementById('phone').value.trim();
    const street = document.getElementById('street').value.trim();
    const city = document.getElementById('city').value.trim();
    const state = document.getElementById('state').value.trim();
    const pincode = document.getElementById('pincode').value.trim();
    const country = document.getElementById('country').value.trim();

    if (fullName.length < 3) {
      document.getElementById('nameError').textContent = 'Enter full name';
      isValid = false;
    }
    if (!/^\d{10}$/.test(phone)) {
      document.getElementById('phoneError').textContent = 'Enter valid 10-digit phone';
      isValid = false;
    }
    if (street === '') {
      document.getElementById('streetError').textContent = 'Street is required';
      isValid = false;
    }
    if (city === '') {
      document.getElementById('cityError').textContent = 'City is required';
      isValid = false;
    }
    if (state === '') {
      document.getElementById('stateError').textContent = 'State is required';
      isValid = false;
    }
    if (!/^\d{6}$/.test(pincode)) {
      document.getElementById('pincodeError').textContent = 'Enter 6-digit PIN code';
      isValid = false;
    }
    if (country === '') {
      document.getElementById('countryError').textContent = 'Country is required';
      isValid = false;
    }

    if (!isValid) return;

    // Send form data using fetch
  const formData = new URLSearchParams(new FormData(this));

  fetch('/user/add-address', {
    method: 'POST',
    body: formData,
    headers: {
      'Content-Type': 'application/x-www-form-urlencoded'
    }
  })
    .then(res => res.json())
    .then(data => {
      if (data.success) {
        Swal.fire({
          icon: 'success',
          title: 'Success!',
          text: data.message,
          confirmButtonText: 'OK',
          confirmButtonColor: '#28a745'
        }).then(() => {
          window.location.href = '/user/user-account';
        });
      } else {
        Swal.fire({
          icon: 'error',
          title: 'Failed!',
          text: data.message,
          confirmButtonText: 'OK',
          confirmButtonColor: '#dc3545'
        });
      }
    })
    .catch(err => {
      console.error('Error:', err);
      Swal.fire({
        icon: 'error',
        title: 'Error!',
        text: 'Something went wrong. Please try again later.',
        confirmButtonText: 'OK',
        confirmButtonColor: '#dc3545'
      });
    });
    
  });

</script>


</body>
</html>